--- gpgme-h-clean.py	(original)
+++ gpgme-h-clean.py	(refactored)
@@ -25,7 +25,7 @@
 deprec_func=re.compile('^(.*typedef.*|.*\(.*\))\s*_GPGME_DEPRECATED;\s*',re.S)
 line_break=re.compile(';|\\$|\\x0c|^\s*#');
 try:
-    gpgme = file(sys.argv[1])
+    gpgme = open(sys.argv[1])
     tmp = gpgme.readline()
     text = ''
     while tmp:
@@ -37,6 +37,6 @@
         tmp = gpgme.readline()
     sys.stdout.write(text)
     gpgme.close()
-except IOError, errmsg:
+except IOError as errmsg:
     sys.stderr.write("%s: %s\n" % (sys.argv[0], errmsg))
     sys.exit(1)
--- pyme/callbacks.py	(original)
+++ pyme/callbacks.py	(refactored)
@@ -27,12 +27,12 @@
         why = ' ' + hook
     if prev_bad:
         why += ' (again)'
-    print "Please supply %s' password%s:" % (hint, why)
+    print("Please supply %s' password%s:" % (hint, why))
     return getpass()
 
 def progress_stdout(what, type, current, total, hook=None):
-    print "PROGRESS UPDATE: what = %s, type = %d, current = %d, total = %d" %\
-          (what, type, current, total)
+    print("PROGRESS UPDATE: what = %s, type = %d, current = %d, total = %d" %\
+          (what, type, current, total))
     
 def readcb_fh(count, hook):
     """A callback for data.  hook should be a Python file-like object."""
--- pyme/core.py	(original)
+++ pyme/core.py	(refactored)
@@ -17,12 +17,12 @@
 #    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 
 # import generators for portability with python2.2
-from __future__ import generators
-
-import pygpgme
-from errors import errorcheck
-import errors
-from util import GpgmeWrapper
+
+
+from . import pygpgme
+from .errors import errorcheck
+from . import errors
+from .util import GpgmeWrapper
 
 class Context(GpgmeWrapper):
     """From the GPGME C documentation:
@@ -85,7 +85,7 @@
             self.last_progresscb = None
 
     def op_keylist_all(self, *args, **kwargs):
-        apply(self.op_keylist_start, args, kwargs)
+        self.op_keylist_start(*args, **kwargs)
         key = self.op_keylist_next()
         while key:
             yield key
@@ -99,7 +99,7 @@
         try:
             errorcheck(pygpgme.gpgme_op_keylist_next(self.wrapped, ptr))
             key = pygpgme.gpgme_key_t_p_value(ptr)
-        except errors.GPGMEError, excp:
+        except errors.GPGMEError as excp:
             key = None
             if excp.getcode() != errors.EOF:
                 raise excp
@@ -119,7 +119,7 @@
         return key
 
     def op_trustlist_all(self, *args, **kwargs):
-        apply(self.op_trustlist_start, args, kwargs)
+        self.op_trustlist_start(*args, **kwargs)
         trust = self.ctx.op_trustlist_next()
         while trust:
             yield trust
@@ -133,7 +133,7 @@
         try:
             errorcheck(pygpgme.gpgme_op_trustlist_next(self.wrapped, ptr))
             trust = pygpgme.gpgme_trust_item_t_p_value(ptr)
-        except errors.GPGMEError, excp:
+        except errors.GPGMEError as excp:
             trust = None
             if excp.getcode() != errors.EOF:
                 raise
@@ -279,7 +279,7 @@
         self.last_readcb = None
 
         if cbs != None:
-            apply(self.new_from_cbs, cbs)
+            self.new_from_cbs(*cbs)
         elif string != None:
             self.new_from_mem(string)
         elif file != None and offset != None and length != None:
@@ -349,8 +349,8 @@
         else:
             fp = pygpgme.fdopen(file.fileno(), file.mode)
             if fp == None:
-                raise ValueError, "Failed to open file from %s arg %s" % \
-                      (str(type(file)), str(file))
+                raise ValueError("Failed to open file from %s arg %s" % \
+                      (str(type(file)), str(file)))
 
         errorcheck(pygpgme.gpgme_data_new_from_filepart(tmp, filename, fp,
                                                       offset, length))
@@ -365,8 +365,8 @@
         tmp = pygpgme.new_gpgme_data_t_p()
         fp = pygpgme.fdopen(file.fileno(), file.mode)
         if fp == None:
-            raise ValueError, "Failed to open file from %s arg %s" % \
-                  (str(type(file)), str(file))
+            raise ValueError("Failed to open file from %s arg %s" % \
+                  (str(type(file)), str(file)))
         errorcheck(gpgme_data_new_from_fd(tmp, fp))
         self.wrapped = pygpgme.gpgme_data_t_p_value(tmp)
         pygpgme.delete_gpgme_data_t_p(tmp)
--- pyme/util.py	(original)
+++ pyme/util.py	(refactored)
@@ -16,8 +16,8 @@
 #    License along with this library; if not, write to the Free Software
 #    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 
-import pygpgme
-from errors import errorcheck
+from . import pygpgme
+from .errors import errorcheck
 
 def process_constants(starttext, dict):
     """Called by the constant libraries to load up the appropriate constants
@@ -60,12 +60,12 @@
         if self._errorcheck(name):
             def _funcwrap(*args, **kwargs):
                 args = [self.wrapped] + list(args)
-                return errorcheck(apply(getattr(pygpgme, name), args, kwargs),
+                return errorcheck(getattr(pygpgme, name)(*args, **kwargs),
                                   "Invocation of " + name)
         else:
             def _funcwrap(*args, **kwargs):
                 args = [self.wrapped] + list(args)
-                return apply(getattr(pygpgme, name), args, kwargs)
+                return getattr(pygpgme, name)(*args, **kwargs)
 
         _funcwrap.__doc__ = getattr(getattr(pygpgme, name), "__doc__")
         return _funcwrap
--- pyme/version.py.bak	2008-11-24 22:44:30.000000000 +0100
+++ pyme/version.py	2012-02-27 07:34:51.874458365 +0100
@@ -2,7 +2,7 @@
 
 productname = 'pyme'
 versionstr = "0.8.1"
-revno = long('$Rev: 281 $'[6:-2])
+revno = int('$Rev: 281 $'[6:-2])
 revstr = "Rev %d" % revno
 datestr = '$Date: 2008/11/24 21:44:30 $'
 
--- Makefile~	2012-02-27 10:34:34.916781430 +0100
+++ Makefile	2012-02-27 10:38:43.706794238 +0100
@@ -29,7 +29,7 @@
 DOCMODSFILES := $(shell find pyme -name "*.py" | egrep -v __init__ | grep -v gpgme.py | sed 'sx/x.xg')
 DOCMODS := $(DOCMODSDIRS) $(DOCMODSFILES:.py=)
 SWIGOPT := $(shell gpgme-config --cflags) -I/usr/include 
-PYMEVERS := $(shell python -c "from pyme.version import *;print versionstr")
+PYMEVERS := $(shell python -c "from pyme.version import *;print(versionstr)")
 SYSTEM = $(shell uname -s | sed 's/_.*//')
 ifeq ($(SYSTEM),MINGW32)
   DLLDIR := $(shell gpgme-config --exec-prefix)/bin
